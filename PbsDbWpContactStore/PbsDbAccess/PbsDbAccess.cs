using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using PbsDbAccess.Models;

namespace PbsDbAccess
{
	public class PbsDbAccess
	{
		private readonly LoggedinUserInformation _loggedinUserInformation;

		private readonly HttpClient _client;

		/// <summary>
		/// 
		/// </summary>
		/// <param name="email"></param>
		/// <param name="loggedinUserInformation"></param>
		public PbsDbAccess(LoggedinUserInformation loggedinUserInformation)
		{
			_loggedinUserInformation = loggedinUserInformation;
			_client = CreateHttpClient();
		}

		public Task<IEnumerable<Group>> RecieveAllGroupsFromLayerGroupAsync()
		{
			return RecieveAllGroupsFromLayerGroupAsync(false);
		}

		public Task<IEnumerable<Group>> RecieveAllGroupsFromLayerGroupRecursiveAsync()
		{
			return RecieveAllGroupsFromLayerGroupAsync(true);
		}
		
		public async Task<IEnumerable<Person>> RecievePersonsOfGroupAsync(string groupId)
		{
			string jsonResponse = await RecieveJsonContentAsync(string.Format(UrlConstants.PersonsOfGroupUrlFormatString, groupId));

			return JsonParser.ParsePeopleOfGroup(jsonResponse);
		}

		public async Task<Group> RecieveLayerGroupOfLoggedInUser()
		{
			Group primaryGroup = await RecievePrimaryGroupFromLoggedInUserAsync();
			if (primaryGroup.IsLayer)
			{
				return primaryGroup;
			}
			else
			{
				return await RecieveLayerGroupFromGroup(primaryGroup);
			}
		}

		public async Task<IEnumerable<Person>> RecieveAllPersonsOfLayerGroup()
		{
			var layerGroup = await RecieveLayerGroupOfLoggedInUser();

			string jsonResponse = await RecieveJsonContentAsync(string.Format(UrlConstants.PersonsOfGroupUrlFormatString, layerGroup.Id));

			return JsonParser.ParsePeopleOfGroup(jsonResponse);
		}

		/// <summary>
		/// Reads the token for the specified user. If the token is not existing, the token will
		/// be automatically generated by the server.
		/// </summary>
		/// <param name="email"></param>
		/// <param name="password"></param>
		/// <returns></returns>
		public static async Task<LoggedinUserInformation> RecieveUserInformationAsync(string email, string password)
		{
			var client = CreateHttpClient();

			var formData = new Dictionary<string, string> { { UrlConstants.EmailFormDataString, email }, { UrlConstants.PasswortFormDataString, password } };
			FormUrlEncodedContent requestContent = new FormUrlEncodedContent(formData);
			var requestMessage = new HttpRequestMessage(HttpMethod.Post, UrlConstants.ReadTokenUrl);
			requestMessage.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(UrlConstants.JsonMimeType));
			requestMessage.Content = requestContent;

			HttpResponseMessage response = await client.SendAsync(requestMessage);

			if (!response.IsSuccessStatusCode)
			{
				HandleStatusCodeErrors(response);
			}

			string responseContent = await response.Content.ReadAsStringAsync();

			return JsonParser.ParseLoggedinUserInformation(responseContent);
		}

		private async Task<Group> RecieveLayerGroupFromGroup(Group group)
		{
			return await RecieveGroupByIdAsync(group.LayerGroupId);
		}

		private async Task<IEnumerable<Group>> RecieveAllSubGroupsFromGroupAsync(Group group, bool recursive = false)
		{
			List<Group> groups = new List<Group>();
			if (group.ChildGroupIds != null)
			{
				foreach (string childGroupId in group.ChildGroupIds)
				{
					var childGroup = await RecieveGroupByIdAsync(childGroupId);
					groups.Add(childGroup);
					if (recursive)
					{
						var subGroups = await RecieveAllSubGroupsFromGroupAsync(childGroup, true);
						groups.AddRange(subGroups);
					}
				}
			}
			return groups;
		}

		private async Task<Group> RecievePrimaryGroupFromLoggedInUserAsync()
		{
			return await RecieveGroupByIdAsync(_loggedinUserInformation.PrimaryGroupId);
		}


		private async Task<IEnumerable<Group>> RecieveAllGroupsFromLayerGroupAsync(bool recursive)
		{
			var layerGroup = await RecieveLayerGroupOfLoggedInUser();

			var subGroups = await RecieveAllSubGroupsFromGroupAsync(layerGroup, recursive);

			return subGroups;
		}

		private async Task<Group> RecieveGroupByIdAsync(string groupId)
		{
			string jsonResponse = await RecieveJsonContentAsync(string.Format(UrlConstants.GroupUrlFormatString, groupId));

			return JsonParser.ParseGroup(jsonResponse);
		}

		private async Task<string> RecieveJsonContentAsync(string uri)
		{
			var requestMessage = CreateGetRequestMessage(uri);
			var response = await _client.SendAsync(requestMessage);

			if (!response.IsSuccessStatusCode)
			{
				HandleStatusCodeErrors(response);
			}

			return await response.Content.ReadAsStringAsync();
		}

		/// <summary>
		/// Creates a request message to the given uri with the HTTP GET method.
		/// </summary>
		/// <param name="uri">The uri to request.</param>
		/// <returns>The created <see cref="HttpRequestMessage"/>.</returns>
		private HttpRequestMessage CreateGetRequestMessage(string uri)
		{
			return CreateRequestMessage(uri, HttpMethod.Get);
		}

		/// <summary>
		/// Creats a request message to the given uri with the given method.
		/// </summary>
		/// <param name="uri">The uri to request.</param>
		/// <param name="method">The method to use.</param>
		/// <returns>The created <see cref="HttpRequestMessage"/>.</returns>
		private HttpRequestMessage CreateRequestMessage(string uri, HttpMethod method)
		{
			HttpRequestMessage message = new HttpRequestMessage(method, uri);
			message.Headers.Add("X-User-Email", _loggedinUserInformation.Email);
			message.Headers.Add("X-User-Token", _loggedinUserInformation.Token);
			message.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(UrlConstants.JsonMimeType));
			return message;
		}

		/// <summary>
		/// Handles status code errors. This method assumes that a error is present.
		/// </summary>
		/// <param name="response">The <see cref="HttpResponseMessage"/> to handle</param>
		private static void HandleStatusCodeErrors(HttpResponseMessage response)
		{
			if (response.StatusCode == HttpStatusCode.Unauthorized)
			{
				throw new InvalidLoginInformationException();
			}
			throw new Exception(FormatHttpErrorMessage(response));
		}

		/// <summary>
		/// Formats an <see cref="HttpResponseMessage"/> for console output.
		/// </summary>
		/// <param name="response">The <see cref="HttpResponseMessage"/> to format.</param>
		/// <returns>The formated string.</returns>
		private static string FormatHttpErrorMessage(HttpResponseMessage response)
		{
			return String.Format("{0} - {1}\n\nResponse:\n{2}",
				response.StatusCode,
				response.ReasonPhrase,
				response.Content.ReadAsStringAsync().Result);
		}

		/// <summary>
		/// Creates an Uri with the given path and parameters. <para>urlWithoutParameters</para> must not
		/// have any parameters in it!
		/// </summary>
		/// <param name="urlWithoutParameters">An url (relativ or absolut) wihtout any parameters.</param>
		/// <param name="parameterValueCollection">A dictionay containing the parameter name as the key and its value as the values.</param>
		/// <returns>The uri with the given path and parameters.</returns>
		private static Uri CreateUriWithParameters(string urlWithoutParameters, Dictionary<string, string> parameterValueCollection)
		{
			var parameterValueProjection = parameterValueCollection
				.Select(keyValuePair => String.Format("{0}={1}", keyValuePair.Key, keyValuePair.Value));
			string queryString = "?" + String.Join("&", parameterValueProjection);
			return new Uri(urlWithoutParameters + queryString);
		}

		/// <summary>
		/// Creates the correctly preconfigured <see cref="HttpClient"/> with the BaseAddress property allready set. Use allways this method.
		/// </summary>
		/// <returns>The correctly preconfigured <see cref="HttpClient"/> to comunicate with the PBS DB.</returns>
		private static HttpClient CreateHttpClient()
		{
			return new HttpClient { BaseAddress = new Uri(UrlConstants.BaseUrl) };
		}
	}

}
